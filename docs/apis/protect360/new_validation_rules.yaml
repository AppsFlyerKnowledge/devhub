openapi: 3.0.3
info:
  title: Validation Rules S2S API (Draft)
  version: 1.0.0
  description: |
    Server-to-Server API for managing validation rules: create, list, retrieve, update, delete, and audit logs.
    This is a draft specification and subject to change.
servers:
  - url: https://hq1.appsflyer.com/api/validation-rules/v1.0/
    description: Validation Rules API v1.0
security:
  - bearerAuth: []
tags:
  - name: Validation Rules
  - name: Audits

paths:
  /rules:
    post:
      tags:
        - Validation Rules
      summary: Create rule
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: createRule
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          description: A unique key to make the create operation idempotent for at least 24 hours.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleCreateRequest'
            examples:
              CreateBlockBySiteId:
                summary: Block installs for specific site IDs
                value:
                  rule_name: "Block bad sites"
                  action: "block"
                  enable: true
                  filters:
                    media_source: "network_a"
                    event_type: "install"
                    app_ids: ["com.example.app1", "id1234567890"]
                  condition:
                    type: set
                    block_dimension: "site_id"
                    block_condition: "in"
                    block_values: ["site_a", "site_b"]
      responses:
        '201':
          description: Rule created
          headers:
            Location:
              description: Absolute URL of the created rule resource
              schema:
                type: string
                format: uri
            ETag:
              description: Entity tag for the created rule; use with If-Match on updates
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Conflict (e.g., rule_name must be unique, or idempotency conflict)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

    get:
      tags:
        - Validation Rules
      summary: List rules
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: listRules
      parameters:
        - in: query
          name: limit
          description: Max number of items to return (1â€“1000)
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - in: query
          name: cursor
          description: Opaque cursor for pagination
          schema: { type: string, nullable: true }
        - in: query
          name: q
          description: Free-text search over rule_name
          schema: { type: string }
        - in: query
          name: media_source
          schema: { type: string }
        - in: query
          name: app_id
          schema: { type: string }
        - in: query
          name: event_type
          schema:
            $ref: '#/components/schemas/EventType'
        - in: query
          name: enable
          schema: { type: boolean }
      responses:
        '200':
          description: Rules list
          headers:
            RateLimit-Limit:
              schema: { type: integer }
            RateLimit-Remaining:
              schema: { type: integer }
            RateLimit-Reset:
              schema: { type: integer, description: Seconds until limit resets }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesListResponse'
              examples:
                PagedResult:
                  value:
                    data:
                      - rule_id: "f9c9f1f0-8d4d-4b7e-9c0a-2b8e6d3d3c10"
                        rule_name: "Block bad sites"
                        version: 3
                      - rule_id: "c2fc0e1d-7b33-48ab-a1bb-2c1d123abcd0"
                        rule_name: "Tag VIP in-apps"
                        version: 1
                    next_cursor: "eyJvZmZzZXQiOjJ9"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /rules/{rule_id}:
    get:
      tags:
        - Validation Rules
      summary: Get rule
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: getRule
      parameters:
        - name: rule_id
          in: path
          required: true
          description: The UUID of the rule
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Rule
          headers:
            ETag:
              description: Entity tag of the current rule state
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

    put:
      tags:
        - Validation Rules
      summary: Update full rule
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
        
        Full update only. PATCH is not supported. Use If-Match for optimistic concurrency.
      operationId: updateRule
      parameters:
        - name: rule_id
          in: path
          required: true
          description: The UUID of the rule
          schema:
            type: string
            format: uuid
        - in: header
          name: If-Match
          required: false
          description: Provide the current ETag/version to prevent lost updates.
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleUpdateRequest'
      responses:
        '200':
          description: Updated rule
          headers:
            ETag:
              description: New entity tag after the update
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict (e.g., rule_name not unique, or If-Match precondition failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

    delete:
      tags:
        - Validation Rules
      summary: Delete rule
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: deleteRule
      parameters:
        - name: rule_id
          in: path
          required: true
          description: The UUID of the rule
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /rules/{rule_id}/status:
    put:
      tags: [Validation Rules]
      summary: Update rule status
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: updateRuleStatus
      parameters:
        - name: rule_id
          in: path
          required: true
          description: The UUID of the rule
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                enable:
                  type: boolean
                  description: true to enable, false to disable the rule
              required: [enable]
      responses:
        '200':
          description: Updated rule with new status
          headers:
            ETag:
              description: New entity tag after the update
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /rules/{rule_id}/audits:
    get:
      tags:
        - Audits
      summary: List audits for a rule
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: listRuleAudits
      parameters:
        - name: rule_id
          in: path
          required: true
          description: The UUID of the rule
          schema:
            type: string
            format: uuid
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - in: query
          name: cursor
          schema: { type: string, nullable: true }
        - in: query
          name: changed_by
          schema: { type: string }
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - in: query
          name: until
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Audit events for the specific rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditsListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /rules/audits:
    get:
      tags:
        - Audits
      summary: List audits across all rules
      description: |
        Links:
          - [Create rule](https://dev.appsflyer.com/hc/reference/createrule)
          - [List rules](https://dev.appsflyer.com/hc/reference/listrules)
          - [Get rule](https://dev.appsflyer.com/hc/reference/getrule)
          - [Update full rule](https://dev.appsflyer.com/hc/reference/updaterule)
          - [Delete rule](https://dev.appsflyer.com/hc/reference/deleterule)
          - [Update rule status](https://dev.appsflyer.com/hc/reference/updaterulestatus)
          - [List audits for a rule (lean)](https://dev.appsflyer.com/hc/reference/listruleaudits)
          - [List audits across all rules (lean)](https://dev.appsflyer.com/hc/reference/listaudits)
      operationId: listAudits
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - in: query
          name: cursor
          schema: { type: string, nullable: true }
        - in: query
          name: rule_id
          schema: { type: string, format: uuid }
        - in: query
          name: changed_by
          schema: { type: string }
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - in: query
          name: until
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Audit events across rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditsListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable Entity (validation error)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Too Many Requests (rate limited)
      headers:
        Retry-After:
          description: Seconds to wait before retrying
          schema: { type: integer }
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: Service Unavailable (HTTP 503). Upstream or load balancer temporarily unavailable.
      content: {}
    GatewayTimeout:
      description: Gateway Timeout (HTTP 504). Upstream did not respond in time.
      content: {}

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
          description: Stable machine-readable error code
        details:
          type: array
          description: Field-level validation details (present on 422)
          items:
            type: object
            properties:
              field: { type: string }
              issue: { type: string }
      required: [message]
      example:
        message: "Validation failed"
        code: "VALIDATION_ERROR"
        details:
          - field: "filters.app_ids[1]"
            issue: "invalid format"

    EventType:
      type: string
      description: Event type filter
      enum: [install, in_app_event, re_engagement]

    BlockDimensionSet:
      type: string
      description: Dimension for set membership conditions
      enum: [site_id, campaign_id, adset_id, ad_id, channel, geo, campaign, event_name]

    BlockDimensionRange:
      type: string
      description: Dimension for range conditions (lookback windows)
      enum: [lookback_days, lookback_hours]

    BlockCondition:
      type: string
      description: Set membership relation
      enum: [in, not_in]

    RangeOperator:
      type: string
      enum: [gt, gte, lt, lte, between]

    RuleListItem:
      type: object
      properties:
        rule_id:
          type: string
          format: uuid
        rule_name:
          type: string
        version:
          type: integer
      required: [rule_id, rule_name, version]
      additionalProperties: false

    RulesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RuleListItem'
        next_cursor:
          type: string
          nullable: true
      required: [data]

    RuleFilters:
      type: object
      properties:
        media_source:
          type: string
          description: Optional media source filter
        event_type:
          $ref: '#/components/schemas/EventType'
        app_ids:
          type: array
          items:
            type: string
      required: [app_ids]
      additionalProperties: false

    RuleBase:
      type: object
      properties:
        rule_id:
          type: string
          format: uuid
          readOnly: true
        rule_name:
          type: string
          description: Unique rule name
        action:
          type: string
          enum: [block, drop, tag]
        enable:
          type: boolean
          description: true if the rule is enabled
          default: true
        filters:
          $ref: '#/components/schemas/RuleFilters'
        version:
          type: integer
          readOnly: true
      required: [rule_name, action, filters]
      additionalProperties: false

    RuleBlockSetCondition:
      type: object
      properties:
        type:
          type: string
          enum: [set]
          default: set
        block_dimension:
          $ref: '#/components/schemas/BlockDimensionSet'
        block_values:
          type: array
          items:
            type: string
        block_condition:
          $ref: '#/components/schemas/BlockCondition'
      required: [type, block_dimension, block_values, block_condition]
      additionalProperties: false

    RuleBlockRangeCondition:
      type: object
      properties:
        type:
          type: string
          enum: [range]
          default: range
        dimension:
          $ref: '#/components/schemas/BlockDimensionRange'
        operator:
          $ref: '#/components/schemas/RangeOperator'
        value:
          oneOf:
            - type: number
            - type: array
              items: { type: number }
              minItems: 2
              maxItems: 2
              description: Lower and upper bounds when operator=between
      required: [type, dimension, operator, value]
      additionalProperties: false

    RuleBlockPayload:
      type: object
      properties:
        condition:
          oneOf:
            - $ref: '#/components/schemas/RuleBlockSetCondition'
            - $ref: '#/components/schemas/RuleBlockRangeCondition'
      required: [condition]
      additionalProperties: false

    RuleTagPayload:
      type: object
      properties:
        tag_key: { type: string }
        tag_value: { type: string }
      required: [tag_key, tag_value]
      additionalProperties: false

    Rule:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/RuleBase'
            - $ref: '#/components/schemas/RuleBlockPayload'
        - allOf:
            - $ref: '#/components/schemas/RuleBase'
            - $ref: '#/components/schemas/RuleTagPayload'
      discriminator:
        propertyName: action
        mapping:
          block: '#/components/schemas/Rule'
          drop:  '#/components/schemas/Rule'
          tag:   '#/components/schemas/Rule'

    RuleCreateRequest:
      description: Payload to create a rule. Structure depends on the action type.
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/RuleBase'
            - $ref: '#/components/schemas/RuleBlockPayload'
        - allOf:
            - $ref: '#/components/schemas/RuleBase'
            - $ref: '#/components/schemas/RuleTagPayload'
      discriminator:
        propertyName: action
      required:
        - rule_name
        - action
        - filters

    RuleUpdateRequest:
      description: Payload to fully replace a rule. Use If-Match to avoid lost updates.
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/RuleBase'
            - $ref: '#/components/schemas/RuleBlockPayload'
        - allOf:
            - $ref: '#/components/schemas/RuleBase'
            - $ref: '#/components/schemas/RuleTagPayload'
      discriminator:
        propertyName: action

    AuditListItem:
      type: object
      properties:
        audit_id:
          type: string
          format: uuid
        rule_id:
          type: string
          format: uuid
        rule_name:
          type: string
      required: [audit_id, rule_id, rule_name]
      additionalProperties: false

    AuditsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditListItem'
        next_cursor:
          type: string
          nullable: true
      required: [data]

    Audit:
      type: object
      properties:
        audit_id:
          type: string
          format: uuid
        rule_id:
          type: string
          format: uuid
        rule_name:
          type: string
          description: Rule name at the time of the change
        version:
          type: integer
        changed_at:
          type: string
          format: date-time
        changed_by:
          type: string
        change_type:
          type: string
          enum: [created, updated, deleted]
        before:
          type: object
          description: Optional full snapshot of the rule before the change
          nullable: true
        after:
          type: object
          description: Optional full snapshot of the rule after the change
          nullable: true
        changes:
          type: object
          description: Optional object describing only the changed fields
          nullable: true
      required: [audit_id, rule_id, version, changed_at, change_type]
      additionalProperties: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token required for authorization. Please refer to https://support.appsflyer.com/hc/en-us/articles/360004562377 for instructions on how to obtain the token.
